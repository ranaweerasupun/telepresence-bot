f we can connect like this, what is the point of using twilio? other than later 
we can use its turn server?


Why bother with Twilio if a DIY STUN-only demo already works?

Your two-tab test succeeds because both PCs happened to be on networks that allow 
direct UDP after STUN. In real deployments you’ll quickly hit edge-cases the prototype 
can’t cover. Twilio (or any managed RTC platform) solves those pain-points and adds 
higher-level features.

What your current stack gives you			What Twilio adds out-of-the-box						Why it matters once you leave the lab
P2P with STUN only – ~80 % of consumer NATs succeed.	Global TURN relay grid (pay-as-you-go, free 10 GB/mo per project)  
Twilio
+1
	The other ~20 % (carrier-grade NATs, symmetric firewalls, hotel Wi-Fi) fail unless you can fall back to TURN. Running and hardening coturn yourself is non-trivial.
One robot ⇄ one operator.	Rooms and SFU (group, large-audience, recording, cloud composition).	Add a supervisor, spectator, or “record this session” and your P2P design collapses; Twilio’s SFU scales it.
WebSocket auth you roll yourself.	Time-limited Access Tokens that embed identity & per-room grants  
Twilio
+1
	Stops random users brute-forcing Robot-IDs; tokens expire (max 24 h) and are generated server-side, so secrets never live in the browser.
Bare WebRTC stats.	Video Insights API & quality callbacks.	You get automatic MOS / jitter graphs and can show “Poor network” to the operator without building telemetry plumbing.
Only JavaScript in browsers.	Official SDKs for iOS, Android, React Native, C#, Unity, Go.	You can swap the Pi for an iOS robot, or add a mobile operator app, with the same signaling layer.
You must monitor, patch, and scale your signaling + coturn servers.	24×7 SLA, DDoS protection, global POPs.	Ops burden (and pager) moves to Twilio; usage is metered so you scale on demand.
P2P SRTP encryption.	Same SRTP + optional E2EE plus HIPAA, GDPR & SOC2 compliance paperwork done.	Necessary for medical or EU deployments without hiring lawyers/auditors.
No built-in robot-control channel yet.	Data Tracks with congestion-controlled SCTP on the same ICE/TURN path.	Send joystick commands without an extra WebSocket and they still relay if TURN is in the path.
Typical migration path

Prototype (what you have):
Custom Express + Socket.io, STUN-only, single pair.

Need reliability:
Swap iceServers for Twilio’s Network Traversal Service credentials → you instantly get TURN without moving media to Twilio’s SFU.

Need extras (recording, spectators, analytics):
Replace your signalling layer with Twilio.Video.connect(token, { room }) on both ends and keep GStreamer by using the Twilio Go / Node client on the Pi to publish your encoded tracks. Your existing media pipeline still works; Twilio just hosts the signalling/SFU and TURN.

You pay only for what you use: STUN is free; TURN is $0.40 – 0.60 / GB  
Twilio
. Compare that with the fixed monthly cost of running, hardening and monitoring your own coturn nodes world-wide.

When DIY is fine vs. when Twilio is safer
Stick with DIY	Switch / augment with Twilio
Hobby, R&D lab, or controlled LANs.	Field robots in offices, hospitals, or unknown guest Wi-Fi.
You accept that 1 in 5 calls may fail and you’ll debug NAT issues yourself.	You want > 99 % connection success and someone else to handle relay capacity.
No spectators, no recording, no regulatory paperwork.	Need multi-party, recordings, compliance, or QoS dashboards for customers.
Happy to patch, scale and monitor your own TURN nodes and signalling 24 × 7.	Prefer usage-based billing over ops burden.

So Twilio isn’t required for simple P2P cases, but it becomes attractive the moment you need reliability, scale, compliance, or simply don’t want to run global TURN/SFU infrastructure yourself.